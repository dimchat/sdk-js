'use strict';
// license: https://mit-license.org
//
//  Ming-Ke-Ming : Decentralized User Identity Authentication
//
//                               Written in 2020 by Moky <albert.moky@gmail.com>
//
// =============================================================================
// The MIT License (MIT)
//
// Copyright (c) 2020 Albert Moky
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =============================================================================
//

//! require <mkm.js>

    /**
     *  Entity (User/Group)
     *  ~~~~~~~~~~~~~~~~~~~
     *  Base class of User and Group, ...
     *
     *  properties:
     *      identifier - entity ID
     *      type       - entity type
     *      meta       - meta for generate ID
     *      document   - visa for user, or bulletin for group
     */
    mkm.mkm.Entity = Interface(null, [IObject]);
    var Entity = mkm.mkm.Entity;

    /**
     *  Get entity ID
     *
     * @return {ID}
     */
    Entity.prototype.getIdentifier = function () {};

    /**
     *  Get entity type
     *
     * @return {uint} ID.type
     */
    Entity.prototype.getType = function () {};

    /**
     *  Get meta for this entity
     *
     * @returns {Meta}
     */
    Entity.prototype.getMeta = function () {};

    /**
     *  Get documents for this entity
     *
     * @returns {Document[]} available documents
     */
    Entity.prototype.getDocuments = function () {};

    /**
     *  Set data source for entity
     *
     * @param {EntityDataSource} barrack
     */
    Entity.prototype.setDataSource = function (barrack) {};
    Entity.prototype.getDataSource = function () {};

    /**
     *  Entity Data Source
     *  ~~~~~~~~~~~~~~~~~~
     *  This interface is for getting information for entity(user/group)
     *
     *  1. meta for user, which is generated by the user's private key
     *  2. meta for group, which is generated by the founder's private key
     *  3. meta key, which can verify message sent by this user(or group founder)
     *  4. visa key, which can encrypt message for the receiver(user)
     */
    Entity.DataSource = Interface(null, null);
    var EntityDataSource = Entity.DataSource;

    /**
     *  Get meta for entity
     *
     * @param {ID} identifier - entity ID
     * @returns {Meta}
     */
    EntityDataSource.prototype.getMeta = function (identifier) {};

    /**
     *  Get documents for entity
     *
     * @param {ID} identifier - entity ID
     * @returns {Document[]} available documents
     */
    EntityDataSource.prototype.getDocuments = function (identifier) {};

    /**
     *  Entity Delegate
     *  ~~~~~~~~~~~~~~~
     */
    Entity.Delegate = Interface(null, null);
    var EntityDelegate = Entity.Delegate;

    /**
     *  Create user with ID
     *
     * @param {ID} identifier - user ID
     * @return {User}
     */
    EntityDelegate.prototype.getUser = function (identifier) {};

    /**
     *  Create group with ID
     *
     * @param identifier - group ID
     * @return {Group}
     */
    EntityDelegate.prototype.getGroup = function (identifier) {};


    //
    //  Base Entity
    //
    mkm.mkm.BaseEntity = function (identifier) {
        BaseObject.call(this);
        this.__identifier = identifier;
        this.__facebook = null;
    };
    var BaseEntity = mkm.mkm.BaseEntity;

    Class(BaseEntity, BaseObject, [Entity], null);

    // Override
    BaseEntity.prototype.equals = function (other) {
        if (this === other) {
            // same object
            return true;
        } else if (!other) {
            return false;
        } else if (Interface.conforms(other, Entity)) {
            // check with entity ID
            other = other.getIdentifier();
        }
        return this.__identifier.equals(other);
    };

    // Override
    BaseEntity.prototype.valueOf = function () {
        return this.toString();
    };
    // Override
    BaseEntity.prototype.toString = function () {
        var clazz = this.getClassName();
        var id = this.__identifier;
        var network = id.getAddress().getType();
        return '<' + clazz + ' id="' + id.toString() + '" network="' + network + '" />';
    };

    BaseEntity.prototype.getClassName = function () {
        return Object.getPrototypeOf(this).constructor.name;
    };

    // Override
    BaseEntity.prototype.setDataSource = function (facebook) {
        this.__facebook = facebook;
    };
    // Override
    BaseEntity.prototype.getDataSource = function () {
        return this.__facebook;
    };

    // Override
    BaseEntity.prototype.getIdentifier = function () {
        return this.__identifier;
    };

    // Override
    BaseEntity.prototype.getType = function () {
        return this.__identifier.getType();
    };

    // Override
    BaseEntity.prototype.getMeta = function () {
        var facebook = this.getDataSource();
        return facebook.getMeta(this.__identifier);
    };

    // Override
    BaseEntity.prototype.getDocuments = function () {
        var facebook = this.getDataSource();
        return facebook.getDocuments(this.__identifier);
    };
